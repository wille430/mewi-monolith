version: 2.1
orbs:
    nx: nrwl/nx@1.1.3
jobs:
    test:
        docker:
            - image: 'cimg/node:14.17-browsers'
              environment:
                  MONGO_URI: localhost
                  TOKEN_KEY: fjAJ4mv0WRlc7ob1Dq7J
                  SEARCH_ENGINE_URL: localhost
                  SEARCH_ENGINE_PORT: 9200

            - image: 'elasticsearch:7.16.2'
              environment:
                  cluster.name: es-test-cluster
                  xpack.security.enabled: false
                  transport.host: localhost
                  network.host: 127.0.0.1
                  http.port: 9200
                  discovery.type: single-node
                  ES_JAVA_OPTS: -Xms750m -Xmx750m

            - image: 'mongo'
        steps:
            - checkout
            - run:
                  command: npm install --frozen-lockfile
                  name: Install dependencies
            - nx/set-shas:
                  error-on-no-successful-workflow: true
                  main-branch-name: main
            - run:
                  command: sh ./tools/clear_elastic.sh
                  name: Prepare Elasticsearch
            # - run:
            #       name: Install and start MongoDB
            #       command: |
            #           wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
            #           sudo apt-get install gnupg
            #           wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
            #           echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
            #           sudo apt-get update
            #           sudo apt-get install -y mongodb-org
            #           sudo systemctl enable mongod
            # - run:
            #       command: sudo npm install pm2 -g
            #       name: Installing pm2
            - run:
                  command: npx nx run-many --target=lint --all
                  name: Lint projects
            - run:
                  command: npx nx run-many --all --target=build --configuration=production
                  name: Run Builds
            # - run:
            #       command: npx nx build api
            #       name: Build API
            # - run:
            #       command: npx pm2 start dist/packages/api/main.js
            #       name: Start API in background
            # - run:
            #       command: npx nx e2e webapp-e2e --record --key $CYPRESS_KEY
            #       name: E2E test client
            - run:
                  command: npx nx run-many --all --target=test
                  name: Run Unit Tests
            - persist_to_workspace:
                  root: .
                  paths:
                      - '*'
    deploy:
        machine:
            image: ubuntu-2004:202010-01
        steps:
            # TODO: deploy image
            - checkout
            - attach_workspace:
                  at: .
            - nx/set-shas:
                  error-on-no-successful-workflow: true
                  main-branch-name: main
            - run:
                  name: Push Docker API Image
                  command: |
                      echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                      docker tag $API_IMAGE_NAME:latest $API_IMAGE_NAME:$CIRCLE_SHA1
                      docker push $API_IMAGE_NAME:latest
                      docker push $API_IMAGE_NAME:$CIRCLE_SHA1
            - run:
                  name: Install kubectl
                  command: |
                      curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                      chmod u+x ./kubectl
            - run:
                  name: Deploy API image to cluster
                  command: |
                      ./kubectl \
                          --kubeconfig=/dev/null \
                          --server=$KUBERNETES_SERVER \
                          --certificate-authority=cert.crt \
                          --token=$KUBERNETES_TOKEN \
            - run:
                  command: npx nx run-many --all --target=deploy
                  name: Deploy to apps
workflows:
    version: 2
    build_test_and_deploy:
        jobs:
            - hold:
                  type: approval
                  filters:
                      branches:
                          only:
                              - main
            - test:
                  requires:
                      - hold
            - deploy:
                  filters:
                      branches:
                          only:
                              - main
                  requires:
                      - test
    build_and_test:
        jobs:
            - hold:
                  type: approval
                  filters:
                      branches:
                          only:
                              - dev
            - test:
                  requires:
                      - hold
